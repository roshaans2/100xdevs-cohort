Types of Databases - 

NoSQL databases 
Store data in a schema-less fashion. Extremely lean and fast way to store data. 
Examples - MongoDB, 

Graph databases 
Data is stored in the form of a graph. Specially useful in cases where relationships need to be stored (social networks
Examples - Neo4j

Vector databases
Stores data in the form of vectors
Useful in Machine learning
Examples - Pinecone

SQL databases
Stores data in the form of rows
Most full stack applications will use this
Examples - MySQL, Postgres

Why not NoSQL?

It’s schemaless properties make it ideal to for bootstraping a project fast. But as your app grows, this property makes it very easy for data to get curropted

What is schemaless?
Different rows can have different schema (keys/types)

Problems with NoSQL - 
Can lead to inconsistent database
Can cause runtime errors 
Is too flexible for an app that needs strictness

Why SQL?
SQL databases have a strict schema. They require you to
Define your schema
Put in data that follows that schema
Update the schema as your app changes and perform migrations
 
So there are 4 parts when using an SQL database (not connecting it to Node.js, just running it and putting data in it)
Running the database.
Using a library that let’s you connect and put data in it.
Creating a table and defining it’s schema.
Run queries on the database to interact with the data (Insert/Update/Delete)

What are ORM's?
ORMs let you easily interact with your database without worrying too much about the underlying syntax (SQL language for eg)

Why ORM's?

1. Simpler syntax (converts objects to SQL queries under the hood)
2. Abstraction that lets you flip the database you are using. Unified API irrespective of the DB
3. Type safety/Auto completion
 4. Automatic migrations
In case of a simple Postgres app, it’s very hard to keep track of all the commands that were ran that led to the current schema of the table.

What is prisma?

Next generation NodeJS and typescript ORM

1. Data model
In a single file, define your schema. What it looks like, what tables you have, what field each table has, how are rows related to each other.
2. Automated migrations
Prisma generates and runs database migrations based on changes to the Prisma schema. 
3. Type Safety
Prisma generates a type-safe database client based on the Prisma schema.
4. Auto-Completion

Client represents all the functions that convert 
User.create({email: "harkirat@gmail.com"})
into
INSERT INTO users VALUES ...

Once you’ve created the prisma/schema.prisma , you can generate these clients  that you can use in your Node.js app
How to generate the client?
npx prisma generate
This generates a new client  for you.



 